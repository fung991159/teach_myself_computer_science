// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    // DMux8Way (in=in[0..15], sel=address[0..2], out=dMuxOut)

    // select which register to load new value
    DMux8Way(in=load, sel=address[0..2],
            a=regAload, b=regBload, c=regCload,
            d=regDload, e=regEload, f=regFload,
            g=regGload, h=regHload
    );

    Register(in=in[0..15], load=regAload, out=outA);
    Register(in=in[0..15], load=regBload, out=outB);
    Register(in=in[0..15], load=regCload, out=outC);
    Register(in=in[0..15], load=regDload, out=outD);
    Register(in=in[0..15], load=regEload, out=outE);
    Register(in=in[0..15], load=regFload, out=outF);
    Register(in=in[0..15], load=regGload, out=outG);
    Register(in=in[0..15], load=regHload, out=outH);

    // select which register output to pipe to RAM8 output
    Mux8Way16(a=outA, b=outB, c=outC,
              d=outD, e=outE, f=outF,
              g=outG, h=outH,
              sel=address[0..2],
              out=out);
}