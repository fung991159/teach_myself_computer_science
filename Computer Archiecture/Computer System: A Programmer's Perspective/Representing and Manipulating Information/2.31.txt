Your coworker gets impatient with your analysis of the overflow conditions for
twoâ€™s-complement addition and presents you with the following implementation
of tadd_ok:

/* Determine whether arguments can be added without overflow */
/* WARNING: This code is buggy. */
int tadd_ok(int x, int y) {
    int sum = x+y;
    return (sum-x == y) && (sum-y == x);
}

You look at the code and laugh. Explain why.

>> Positive / Neagtive overflow would have happened when the sum was calculated.
So even though "(sum-x == y) && (sum-y == x)" is mathmatically make sense, it
will still suffer from the same overflow issue.