Comment:
    1. higher-order procedures: procedures that manipulate procedures, 
    either accept procedures as arguments or return procedures as values.
    2. lambda is a procedure without name, the rest is the same as any procedure
    

Exercise 1.29. Simpson's Rule is a more accurate method of numerical integration than the method
illustrated above. Using Simpson's Rule, the integral of a function f between a and b is approximated as
where h = (b - a)/n, for some even integer n, and yk = f(a + kh). (Increasing n increases the accuracy of the
approximation.) Define a procedure that takes as arguments f, a, b, and n and returns the value of the
integral, computed using Simpson's Rule. Use your procedure to integrate cube between 0 and 1 (with n =
100 and n = 1000), and compare the results to those of the integral procedure shown above.

Exercise 1.30. The sum procedure above generates a linear recursion. The procedure can be rewritten so
that the sum is performed iteratively. Show how to do this by filling in the missing expressions in the
following definition:
(define (sum term a next b)
    (define (iter a result)
        (if (a > b)
            result
            (iter (next a) (+ result term a))))
    (iter a 0)
)
! correct~

Exercise 1.31.
a. The sum procedure is only the simplest of a vast number of similar abstractions that can be captured as
higher-order procedures.Write an analogous procedure called product that returns the product of the
values of a function at points over a given range. Show how to define factorial in terms of product.
Also use product to compute approximations to using the formula
>>
(define (product term a next b)
    (if (> a b)
        0
    (* (term a)
        (product term (next a) (next b))
    )
)
>> Show how to define factorial in terms of product.
>> term = factorial, a = bigger number, next= -1 instead of +1, b = 1
(define (factorial num)
    (product factorial num next 1)
)
!! I revesed the step from end to beginning, but it still works, just differently ;)
!! though base case should be 1, because anything multiple by 0 is 0, undoing all previous result


b. If your product procedure generates a recursive process, write one that generates an iterative process.
If it generates an iterative process, write one that generates a recursive process.

>> iterative process
(define (product term a next b)
    (define iter a result)
        (if (> a b)
            result
            (iter (next a) (* result term a))
        )
    (iter a 0)
)
! same here, base case should be 1


Exercise 1.32. a. Show that sum and product (exercise 1.31) are both special cases of a still more
general notion called accumulate that combines a collection of terms, using some general accumulation
function:

(accumulate combiner null-value term a next b)

Accumulate takes as arguments the same term and range specifications as sum and product, together
with a combiner procedure (of two arguments) that specifies how the current term is to be combined
with the accumulation of the preceding terms and a null-value that specifies what base value to use
when the terms run out. Write accumulate and show how sum and product can both be defined as
simple calls to accumulate.

(define accumulate combiner null-value term a next b
    (define combiner pre_term curr_term
        (+ acc_pre_terms curr_term)
    )
    (define iter a result)
        (if (> a b)
            null-value
            (iter (next a) (* result term a))
            )
        (iter a 0)
)
>> no clue on how combiner are defined

!! this looks surprisingly simple (as usual), got the null-value part right,
but not the combiner...so combiner is actually a operator...

(define (accumulate combiner null-value term a next b) 
    (if (> a b) 
        null-value 
        (combiner (term a) (accumulate combiner null-value term (next a) next b)))) 


Exercise 1.33. You can obtain an even more general version of accumulate (exercise 1.32) by
introducing the notion of a filter on the terms to be combined. That is, combine only those terms derived
from values in the range that satisfy a specified condition. The resulting filtered-accumulate
abstraction takes the same arguments as accumulate, together with an additional predicate of one argument
that specifies the filter. Write filtered-accumulate as a procedure. Show how to express the
following using filtered-accumulate:

(define filtered-accumulate combiner null-value term a next b filter
    (if (filter a) 
        null-value 
        (combiner (term a) (accumulate combiner null-value term (next a) next b)))) 
)
a. the sum of the squares of the prime numbers in the interval a to b (assuming that you have a prime?
predicate already written)

>>(filtered-accumulate + 0 square a next b is-prime)

b. the product of all the positive integers less than n that are relatively prime to n (i.e., all positive integers i
< n such that GCD(i,n) = 1).

>>(filtered-accumulate * 0 square a next n is-prime)
>> doesn't really understand this question


Exercise 1.34. Suppose we define the procedure
(define (f g)
    (g 2))
Then we have
(f square)
4
(f (lambda (z) (* z (+ z 1))))
6

What happens if we (perversely) ask the interpreter to evaluate the combination (f f)? Explain.

>> f is a higher procedure that accept g which with parameter = 2.
>> (f f) should be the same as pass in 2 to f, since 2 is an int but not a procedure
>> it should result in error?
! correct 


Exercise 1.35. Show that the golden ratio
 (section 1.2.2) is a fixed point of the transformation x
1/x, and use this fact to compute
 by means of the fixed-point procedure.

>> (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
>>1.6180327868852458


Exercise 1.36. Modify fixed-point so that it prints the sequence of approximations it generates, using
the newline and display primitives shown in exercise 1.22. Then find a solution to xx = 1000 by
finding a fixed point of x
 log(1000)/log(x). (Use Scheme's primitive log procedure, which computes
natural logarithms.) Compare the number of steps this takes with and without average damping. (Note that
you cannot start fixed-point with a guess of 1, as this would cause division by log(1) = 0.)

>> modified procedure
(define tolerance 0.00001)
  (define (fixed-point f first-guess)
    (define (close-enough? v1 v2)
      (< (abs (- v1 v2)) tolerance))
    (define (try guess)
      (newline)
      (display guess)
      (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next))))
    (try first-guess))

(fixed-point (lambda (x) (/ (log 1000) (log x)))
1.1)

1.1
72.47657378429035
1.6127318474109593
14.45350138636525
2.5862669415385087
7.269672273367045
3.4822383620848463
5.536500810236703
4.036406406288111
4.95053682041456
4.318707390180805
4.721778787145103
4.450341068884912
4.626821434106115
4.509360945293209
4.586349500915509
4.535372639594589
4.568901484845316
4.546751100777536
4.561341971741742
4.551712230641226
4.558059671677587
4.55387226495538
4.556633177654167
4.554812144696459
4.556012967736543
4.555220997683307
4.555743265552239
4.555398830243649
4.555625974816275
4.555476175432173
4.555574964557791
4.555509814636753
4.555552779647765
4.555524444961165
4.555543131130589
4.555530807938518=> 4.555538934848503


Exercise 1.37. a. An infinite continued fraction is an expression of the form
As an example, one can show that the infinite continued fraction expansion with the Ni and the Di all equal
to 1 produces 1/ , where is the golden ratio (described in section 1.2.2). One way to approximate an
infinite continued fraction is to truncate the expansion after a given number of terms. Such a truncation -- a
so-called k-term finite continued fraction -- has the form
Suppose that n and d are procedures of one argument (the term index i) that return the Ni and Di of the
terms of the continued fraction. Define a procedure cont-frac such that evaluating (cont-frac n
d k) computes the value of the k-term finite continued fraction. Check your procedure by approximating
1/ using
(cont-frac (lambda (i) 1.0)
(lambda (i) 1.0)
k)
for successive values of k. How large must you make k in order to get an approximation that is accurate to
4 decimal places?

! can't think this through, so peeked at the answer:
(define (con-frac n d k)
  (define (iter i result)
    (if (= 0 i)
        result
        (iter (- i 1) (/ (n i) (+ (d i) result)))))
  (iter k (/ (n k) (d k))))


b. If your cont-frac procedure generates a recursive process, write one that generates an iterative
process. If it generates an iterative process, write one that generates a recursive process.

>> my attempt to convert it to recursive one
(define (cont-frac n d k)
  (if (= k 0)
    (0)
    (/ (n k) (+ (d k) (cont-frac n d (k-1))))
  )
)


Exercise 1.38. In 1737, the Swiss mathematician Leonhard Euler published a memoir De Fractionibus
Continuis, which included a continued fraction expansion for e - 2, where e is the base of the natural
logarithms. In this fraction, the Ni are all 1, and the Di are successively 1, 2, 1, 1, 4, 1, 1, 6, 1, 1, 8, ....
Write a program that uses your cont-frac procedure from exercise 1.37 to approximate e, based on
Euler's expansion.
! the hard bit of this question is to get how "D" was computed,
! turn out it is 
(define (d-euler i)
  (if (= (modulo i 3) 2)
      (* 2(/ (+ i 1) 3))
      1))

! modulo of 3 because the numbers are 3 number in a group
! then it is simply apply d-euler into cont-frac
(cont-frac-iter (lambda (i) 1.0)
                 d-euler
                 1) 


Exercise 1.39. A continued fraction representation of the tangent function was published in 1770 by the
German mathematician J.H. Lambert:
where x is in radians. Define a procedure (tan-cf x k) that computes an approximation to the tangent
function based on Lambert's formula. K specifies the number of terms to compute, as in exercise 1.37.


! can't really get this part also, how on earth people can make it look so easy?

(define (tan-cf x k)
  (cont-frac-iter
   (lambda (i) (if (= i 1) x (* x x -1)))
   (lambda (i) (- (* 2.0 i) 1))
   k))


Exercise 1.40. Define a procedure cubic that can be used together with the newtons-method
procedure in expressions of the form
(newtons-method (cubic a b c) 1)
to approximate zeros of the cubic x3 + ax2 + bx + c.

>> should be like so
(define (cubic a b c)
  (lambda (x) (+ (* x x x)
                 (* a x x)
                 (* b x)
                  c)
    )
)
! easy job, though should have use primitive function


Exercise 1.41. Define a procedure double that takes a procedure of one argument as argument and
returns a procedure that applies the original procedure twice. For example, if inc is a procedure that adds
1 to its argument, then (double inc) should be a procedure that adds 2. What value is returned by
(((double (double double)) inc) 5)

>> this is kind of tricky, I did fall into the trap of multiply the return value of function by two, 
>> turn out it should be passing the return value of the original function and run it again
>> (((double (double double)) inc) 5) produces "21"

(define (double f) 
  (lambda (x) (
    f (f x)
    )
  )
)
! correct


Exercise 1.42. Let f and g be two one-argument functions. The composition f after g is defined to be the
function x
 f(g(x)). Define a procedure compose that implements composition. For example, if inc is a
procedure that adds 1 to its argument,
((compose square inc) 6)
49

>> this is almost the same as ex. 1.41, but the middle part is a 
>> function call of the returned value, instead of returning a procedure
(define (compose f g)
  (lambda (x)
    (f (g x))
  )
)
! correct

Exercise 1.43. If f is a numerical function and n is a positive integer, then we can form the nth repeated
application of f, which is defined to be the function whose value at x is f(f(...(f(x))...)). For example, if
f is the function x x + 1, then the nth repeated application of f is the function x x + n. If f is the
operation of squaring a number, then the nth repeated application of f is the function that raises its
argument to the 2nth power. Write a procedure that takes as inputs a procedure that computes f and a
positive integer n and returns the procedure that computes the nth repeated application of f. Your procedure
should be able to be used as follows:
((repeated square 2) 5)
625
Hint: You may find it convenient to use compose from exercise 1.42.

>>> this one is easy, slight modified of 1.42 and further abstract the function
(define (repeated f n)
  (lambda (x)
    (expt (f x) n)
  )
)
! incorrect, the function should return a procedure instead of value :(

(define (repeated f n)
  (if (= n 1)
    f
    (compose f (repeated f (- n 1)))
  )
)

Exercise 1.44. The idea of smoothing a function is an important concept in signal processing. If f is a
function and dx is some small number, then the smoothed version of f is the function whose value at a point
x is the average of f(x - dx), f(x), and f(x + dx). Write a procedure smooth that takes as input a procedure
that computes f and returns a procedure that computes the smoothed f. It is sometimes valuable to
repeatedly smooth a function (that is, smooth the smoothed function, and so on) to obtained the n-fold
smoothed function. Show how to generate the n-fold smoothed function of any given function using
smooth and repeated from exercise 1.43.

>> this shoudl be the answer, though no way to test this

(define (smooth f n)
  (lambda (x dx)
    repeated 
      (avg (f (- x dx)) (f x) (f (+ x dx)))
      n
  )
)
! partially correct, except "(avg (f (- x dx)) (f x) (f (+ x dx)))" should be a function
! use either lambda or define a actual procedure to house this


Exercise 1.45. We saw in section 1.3.3 that attempting to compute square roots by naively finding a fixed
point of y
 x/y does not converge, and that this can be fixed by average damping. The same method
works for finding cube roots as fixed points of the average-damped y x/y2. Unfortunately, the process
does not work for fourth roots -- a single average damp is not enough to make a fixed-point search for y
x/y3 converge. On the other hand, if we average damp twice (i.e., use the average damp of the average
damp of y x/y3) the fixed-point search does converge. Do some experiments to determine how many
average damps are required to compute nth roots as a fixed-point search based upon repeated average
damping of y x/yn-1. Use this to implement a simple procedure for computing nth roots using fixed-
point, average-damp, and the repeated procedure of exercise 1.43. Assume that any arithmetic
operations you need are available as primitives.

>> this one is pretty hard, not entirely sure, my try

(define (n-root f n)
  (lambda (x)
    (repeated ; return value
      (fixed-point ;
        (average-damp f) ; retun func
      1)
    n
    )
  )
)


Exercise 1.46. Several of the numerical methods described in this chapter are instances of an extremely
general computational strategy known as iterative improvement. Iterative improvement says that, to
compute something, we start with an initial guess for the answer, test if the guess is good enough, and
otherwise improve the guess and continue the process using the improved guess as the new guess. Write a
procedure iterative-improve that takes two procedures as arguments: a method for telling whether a
guess is good enough and a method for improving a guess. Iterative-improve should return as its
value a procedure that takes a guess as argument and keeps improving the guess until it is good enough.
Rewrite the sqrt procedure of section 1.1.7 and the fixed-point procedure of section 1.3.3 in terms
of iterative-improve.

>> I think the key idea here is for the lambda function to call itself
>> though I am not sure where lambda (x) (x x) kicks in

! peek enough answer to work on it further ;)
(define (iterative-improve predicate-f improve-f)
  (define (iter guess)
    (if (predicate-f guess)
      guess
      (improve-f guess)
    )
  )
  (lambda (guess) (iter guess))
)

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (square x)
  (* x x)
)

(define (sqrt x)
  ((iterative-improve good-enough? improve) 1)
)

(sqrt 10)
