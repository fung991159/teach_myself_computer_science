Comment:
    1. closure (mentioned again) - a attributes of compounded data that any elements be composed of itself.
    i.e. one of the elements of a pair can in turn be another pair.

Exercise 2.17. Define a procedure last-pair that returns the list that contains only the last element of a
given (nonempty) list:
(last-pair (list 23 72 149 34))
(34)

>> piece of cake
(define (last-pair lst)
  (if (null? (cdr lst))
    (car lst)
    (last-pair (cdr lst))
  )
)


Exercise 2.18. Define a procedure reverse that takes a list as argument and returns a list of the same
elements in reverse order:
(reverse (list 1 4 9 16 25))
(25 16 9 4 1)

>> tried to find multiple way, but all doesn't seems to work
>> could create a empty list, then check if the car value is the last of value of the original list, 
>> if no then add to dummy list 

! my peusdo code is heading to right direciton, but just couldn't quite get how to implement it in a
! recursive manner :(
!
(define (reverse lst)
  (if (null? (cdr lst))
    lst
    (append 
      (reverse (cdr lst))
      (cons (car lst) '() )
    )
  )
)



Exercise 2.19. Consider the change-counting program of section 1.2.2. It would be nice to be able to easily
change the currency used by the program, so that we could compute the number of ways to change a British
pound, for example. As the program is written, the knowledge of the currency is distributed partly into the
procedure first-denomination and partly into the procedure count-change (which knows that
there are five kinds of U.S. coins). It would be nicer to be able to supply a list of coins to be used for
making change.
We want to rewrite the procedure cc so that its second argument is a list of the values of the coins to use
rather than an integer specifying which coins to use. We could then have lists that defined each kind of
currency:
(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))
We could then call cc as follows:
(cc 100 us-coins)
292
To do this will require changing the program cc somewhat. It will still have the same form, but it will
access its second argument differently, as follows:
(define (cc amount coin-values)
(cond ((= amount 0) 1)
((or (< amount 0) (no-more? coin-values)) 0)
(else
(+ (cc amount
(except-first-denomination coin-values))
(cc (- amount
(first-denomination coin-values))
coin-values)))))
Define the procedures first-denomination, except-first-denomination, and no-more?
in terms of primitive operations on list structures.Does the order of the list coin-values affect the
answer produced by cc? Why or why not?

>> the order of list coin would not affect the answer, it will still go through the same
>> values of coins

(define (no-more? coin-values)
  (null? coin-values))

(define (first-denomination coin-values)
  (car coin-values)
)
(define (except-first-denomination coin-values)
  (cdr coin-values)
)
(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(cc 100 us-coins)
(cc 100 uk-coins)


Exercise 2.20. The procedures +, *, and list take arbitrary numbers of arguments. One way to define
such procedures is to use define with dotted-tail notation. In a procedure definition, a parameter list that
has a dot before the last parameter name indicates that, when the procedure is called, the initial parameters
(if any) will have as values the initial arguments, as usual, but the final parameter's value will be a list of
any remaining arguments. For instance, given the definition
(define (f x y . z) <body>)
the procedure f can be called with two or more arguments. If we evaluate
(f 1 2 3 4 5 6)
then in the body of f, x will be 1, y will be 2, and z will be the list (3 4 5 6). Given the definition
(define (g . w) <body>)
the procedure g can be called with zero or more arguments. If we evaluate
(g 1 2 3 4 5 6)
then in the body of g, w will be the list (1 2 3 4 5 6).11
Use this notation to write a procedure same-parity that takes one or more integers and returns a list of
all the arguments that have the same even-odd parity as the first argument. For example,
(same-parity 1 2 3 4 5 6 7)
(1 3 5 7)
(same-parity 2 3 4 5 6 7)
(2 4 6)


>> totally no idea on this, can only get so far as getting the head and tail
>> of the list and check it against "even?". Not sure how to unpack a list back
>> into integer also

!! always easy to see others does it, there are quite a few different solution
!! after googling, but this one is intuitive. I like the idea of keeping the first item in list
!! and keep checking if for odd/even at each iteration

(define (same-parity a . z)
   (define (iter items answer)
     (if (null? items)
         answer
         (iter (cdr items)
               (if (= (remainder (car items) 2)
                      (remainder a 2))
                   (append answer (list (car items)))
                   answer))))
   (iter z (list a)))


Exercise 2.21. The procedure square-list takes a list of numbers as argument and returns a list of the
squares of those numbers.
(square-list (list 1 2 3 4))
  (1 4 9 16)
Here are two different definitions of square-list. Complete both of them by filling in the missing
expressions:
(define (square-list items)
  (if (null? items)
    nil
    (cons <??> <??>)))

(define (square-list items)
  (map <??> <??>))

>> this is one of the refresher exercise, easy one
>> first one 
(define (square-list items)
  (if (null? items)
    '()
    (cons (* (car items) (car items))
          (square-list (cdr items))))
    )
>> second
(map (lambda (x) (* x x)) (list 1 2 3 4))


Exercise 2.22. Louis Reasoner tries to rewrite the first square-list procedure of exercise 2.21 so that
it evolves an iterative process:
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
      answer
      (iter (cdr things)
            (cons (square (car things))
                  answer))))
  (iter items nil))

Unfortunately, defining square-list this way produces the answer list in the reverse order of the one
desired. Why?
>> becaue the cons part is inversed, answer should be passed first before square

Louis then tries to fix his bug by interchanging the arguments to cons:
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
      answer
      (iter (cdr things)
            (cons answer 
                  (square (car things))
                  ))))
  (iter items '()))
  
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
      answer
      (iter (cdr things)
            (cons answer 
                  (square (car things))
                  ))))
This doesn't work either. Explain.

>> cons can combine a single item with a list only when the single element 
>> is at the first argument, if the list is first element, then it will
>> return a new list, where 1st element is the old list, the 2nd element 
>> be the integer
>> (cons 4 (list 1 2 3)) # ((1 2 3) 4)
