Comment:
    1. closure (mentioned again) - a attributes of compounded data that any elements be composed of itself.
    i.e. one of the elements of a pair can in turn be another pair.
    2. a list is simply a chain of cons object
    3. a map function is a higer order function that take a fuction and a list,
      then apply the function to all its elements
    4. a hierachical structures can be formed from a list by using lists of list,
    the inner list is the lower hierachy one
    
Exercise 2.17. Define a procedure last-pair that returns the list that contains only the last element of a
given (nonempty) list:
(last-pair (list 23 72 149 34))
(34)

>> piece of cake
(define (last-pair lst)
  (if (null? (cdr lst))
    (car lst)
    (last-pair (cdr lst))
  )
)


Exercise 2.18. Define a procedure reverse that takes a list as argument and returns a list of the same
elements in reverse order:
(reverse (list 1 4 9 16 25))
(25 16 9 4 1)

>> tried to find multiple way, but all doesn't seems to work
>> could create a empty list, then check if the car value is the last of value of the original list, 
>> if no then add to dummy list 

! my peusdo code is heading to right direciton, but just couldn't quite get how to implement it in a
! recursive manner :(
!
(define (reverse lst)
  (if (null? (cdr lst))
    lst
    (append 
      (reverse (cdr lst))
      (cons (car lst) '() )
    )
  )
)



Exercise 2.19. Consider the change-counting program of section 1.2.2. It would be nice to be able to easily
change the currency used by the program, so that we could compute the number of ways to change a British
pound, for example. As the program is written, the knowledge of the currency is distributed partly into the
procedure first-denomination and partly into the procedure count-change (which knows that
there are five kinds of U.S. coins). It would be nicer to be able to supply a list of coins to be used for
making change.
We want to rewrite the procedure cc so that its second argument is a list of the values of the coins to use
rather than an integer specifying which coins to use. We could then have lists that defined each kind of
currency:
(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))
We could then call cc as follows:
(cc 100 us-coins)
292
To do this will require changing the program cc somewhat. It will still have the same form, but it will
access its second argument differently, as follows:
(define (cc amount coin-values)
(cond ((= amount 0) 1)
((or (< amount 0) (no-more? coin-values)) 0)
(else
(+ (cc amount
(except-first-denomination coin-values))
(cc (- amount
(first-denomination coin-values))
coin-values)))))
Define the procedures first-denomination, except-first-denomination, and no-more?
in terms of primitive operations on list structures.Does the order of the list coin-values affect the
answer produced by cc? Why or why not?

>> the order of list coin would not affect the answer, it will still go through the same
>> values of coins

(define (no-more? coin-values)
  (null? coin-values))

(define (first-denomination coin-values)
  (car coin-values)
)
(define (except-first-denomination coin-values)
  (cdr coin-values)
)
(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(cc 100 us-coins)
(cc 100 uk-coins)


Exercise 2.20. The procedures +, *, and list take arbitrary numbers of arguments. One way to define
such procedures is to use define with dotted-tail notation. In a procedure definition, a parameter list that
has a dot before the last parameter name indicates that, when the procedure is called, the initial parameters
(if any) will have as values the initial arguments, as usual, but the final parameter's value will be a list of
any remaining arguments. For instance, given the definition
(define (f x y . z) <body>)
the procedure f can be called with two or more arguments. If we evaluate
(f 1 2 3 4 5 6)
then in the body of f, x will be 1, y will be 2, and z will be the list (3 4 5 6). Given the definition
(define (g . w) <body>)
the procedure g can be called with zero or more arguments. If we evaluate
(g 1 2 3 4 5 6)
then in the body of g, w will be the list (1 2 3 4 5 6).11
Use this notation to write a procedure same-parity that takes one or more integers and returns a list of
all the arguments that have the same even-odd parity as the first argument. For example,
(same-parity 1 2 3 4 5 6 7)
(1 3 5 7)
(same-parity 2 3 4 5 6 7)
(2 4 6)


>> totally no idea on this, can only get so far as getting the head and tail
>> of the list and check it against "even?". Not sure how to unpack a list back
>> into integer also

!! always easy to see others does it, there are quite a few different solution
!! after googling, but this one is intuitive. I like the idea of keeping the first item in list
!! and keep checking if for odd/even at each iteration

(define (same-parity a . z)
   (define (iter items answer)
     (if (null? items)
         answer
         (iter (cdr items)
               (if (= (remainder (car items) 2)
                      (remainder a 2))
                   (append answer (list (car items)))
                   answer))))
   (iter z (list a)))


Exercise 2.21. The procedure square-list takes a list of numbers as argument and returns a list of the
squares of those numbers.
(square-list (list 1 2 3 4))
  (1 4 9 16)
Here are two different definitions of square-list. Complete both of them by filling in the missing
expressions:
(define (square-list items)
  (if (null? items)
    nil
    (cons <??> <??>)))

(define (square-list items)
  (map <??> <??>))

>> this is one of the refresher exercise, easy one
>> first one 
(define (square-list items)
  (if (null? items)
    '()
    (cons (* (car items) (car items))
          (square-list (cdr items))))
    )
>> second
(map (lambda (x) (* x x)) (list 1 2 3 4))


Exercise 2.22. Louis Reasoner tries to rewrite the first square-list procedure of exercise 2.21 so that
it evolves an iterative process:
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
      answer
      (iter (cdr things)
            (cons (square (car things))
                  answer))))
  (iter items nil))

Unfortunately, defining square-list this way produces the answer list in the reverse order of the one
desired. Why?
>> becaue the cons part is inversed, answer should be passed first before square

Louis then tries to fix his bug by interchanging the arguments to cons:
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
      answer
      (iter (cdr things)
            (cons answer 
                  (square (car things))
                  ))))
  (iter items '()))
  
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
      answer
      (iter (cdr things)
            (cons answer 
                  (square (car things))
                  ))))
This doesn't work either. Explain.

>> cons can combine a single item with a list only when the single element 
>> is at the first argument, if the list is first element, then it will
>> return a new list, where 1st element is the old list, the 2nd element 
>> be the integer
>> (cons 4 (list 1 2 3)) # ((1 2 3) 4)


Exercise 2.23. The procedure for-each is similar to map. It takes as arguments a procedure and a list of
elements. However, rather than forming a list of the results, for-each just applies the procedure to each
of the elements in turn, from left to right. The values returned by applying the procedure to the elements are
not used at all -- for-each is used with procedures that perform an action, such as printing. For example,
(for-each (lambda (x) (newline) (display x))
  (list 57 321 88))
    57
    321
    88
The value returned by the call to for-each (not illustrated above) can be something arbitrary, such as
true. Give an implementation of for-each.

>> hmm, I just knew it is possible to cons with a print function
(define (for-each proc items)
  (if (null? items)
    #t
    (cons (for-each proc (cdr items))
          (proc (car items))
          )))


Exercise 2.24. Suppose we evaluate the expression (list 1 (list 2 (list 3 4))). Give the
result printed by the interpreter, the corresponding box-and-pointer structure, and the interpretation of this
as a tree (as in figure 2.6).

>> print result (1 (2 (3 4)))
>> hard to describe what I drew for box-and-pointer structure and tree, but those ain't hard.


Exercise 2.25. Give combinations of cars and cdrs that will pick 7 from each of the following lists:
(1 3 (5 7) 9)
>> it is a pain to work with scheme
>> (car (cdr (car (cdr (cdr '(1 3 (5 7) 9))))))
((7))
>> (car (car '((7))))
(1 (2 (3 (4 (5 (6 7))))))
>> (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr '(1 (2 (3 (4 (5 (6 7)))))))))


Exercise 2.26. Suppose we define x and y to be two lists:
(define x (list 1 2 3))
(define y (list 4 5 6))
What result is printed by the interpreter in response to evaluating each of the following expressions:
(append x y)
>> (1 2 3 4 5 6)
(cons x y)
>> ((1 2 3) 4 5 6)
>> this feature of cons always get me, first arg will be append to the 2nd arg as list
(list x y)
>> ((1 2 3) (4 5 6))


Exercise 2.27. Modify your reverse procedure of exercise 2.18 to produce a deep-reverse
procedure that takes a list as argument and returns as its value the list with its elements reversed and with all
sublists deep-reversed as well. For example,
(define x (list (list 1 2) (list 3 4)))
x
((1 2) (3 4))
(reverse x)
((3 4) (1 2))
(deep-reverse x)
((4 3) (2 1))


!! look through several implementation, found one that is easier to understand,
!! but still I don't have a clue to apply this myself :(


(define (deep-reverse x)
  (display x)
  (newline)
  (cond ((null? x) '())
        ((pair? x)
         (append 
            (deep-reverse (cdr x)) 
            (cons (deep-reverse (car x)) '() )))
        (else x)))

Exercise 2.28. Write a procedure fringe that takes as argument a tree (represented as a list) and returns a
list whose elements are all the leaves of the tree arranged in left-to-right order. For example,

!! as more I read, I found myself does not understand recursion too well 


(define (fringe l)
  (cond ((null? l) ''() )
        ((pair? (car l)) (append (fringe (car l)) (fringe (cdr l))))
        (else (cons (car l) (fringe (cdr l))))))


Exercise 2.29. A binary mobile consists of two branches, a left branch and a right branch. Each branch is a
rod of a certain length, from which hangs either a weight or another binary mobile. We can represent a
binary mobile using compound data by constructing it from two branches (for example, using list):
(define (make-mobile left right)
  (list left right))
A branch is constructed from a length (which must be a number) together with a structure, which
may be either a number (representing a simple weight) or another mobile:
(define (make-branch length structure)
  (list length structure))
a. Write the corresponding selectors left-branch and right-branch, which return the branches of a
mobile, and branch-length and branch-structure, which return the components of a branch.
(define (left-branch mobile)
  (car mobile)
)

(define (right-branch mobile)
  (car (cdr mobile))
)

(define (branch-length branch)
  (car branch)
)

(define (branch-structure branch)
  (car (cdr branch))
)


b. Using your selectors, define a procedure total-weight that returns the total weight of a mobile.
>> my try, so total-weight will:
1. return 0 if input is null
2. (in branch level) return weight if input is a single element and is integer type,
  otherwise it is another mobile and apply total-weight again


(define (total-weight x)
  (cond ((null? x) 0)
        (if (not (pair? x)) (integer? x)) ;; if weight, return the weight, else it is mobile, then apply total-weight again
          (branch-structure x)) 
          (total-weight x)
        (else (+ (total-weight (left-branch x))
              (total-weight (right-branch x))))
)

!! hmm, i actually over think a bit, but was in right direction at least
!! this is written in a very concise way

(define (branch-weight branch)
    (if (pair? (branch-structure branch))
        (total-weight (branch-structure branch))
        (branch-structure branch)))

(define (total-weight mobile)
    (+ (branch-weight (left-branch mobile))
       (branch-weight (right-branch mobile))))


c. A mobile is said to be balanced if the torque applied by its top-left branch is equal to that applied by its
top-right branch (that is, if the length of the left rod multiplied by the weight hanging from that rod is equal
to the corresponding product for the right side) and if each of the submobiles hanging off its branches is
balanced. Design a predicate that tests whether a binary mobile is balanced.

>> my attempt on the question,
it has been made easy due to previously abstractino on branch

(define (torque l w)
  (* l w)
)

(define (balance? mobile)
  (if (= (torque (branch-length (left-branch mobile))
                 (branch-weight (left-branch mobile)))
         (torque (branch-length (right-branch mobile))
                 (branch-weight (right-branch mobile)))
      )
      #t
      #f
  )  
)

!! looks like I forgot about sub branch balance
!! both the first level branch and the mobile object in structure
!! also need to be balance.

(define (torque branch)
    (* (branch-length branch)
       (branch-weight branch)))

(define (balanced? mobile)
    (and (= (torque (left-branch mobile))
            (torque (right-branch mobile)))
         (if (pair? (branch-structure (left-branch mobile)))
             (balanced? (branch-structure (left-branch mobile)))
             true)
         (if (pair? (branch-structure (right-branch mobile)))
             (balanced? (branch-structure (right-branch mobile)))
             true)))


d. Suppose we change the representation of mobiles so that the constructors are
(define (make-mobile left right)
  (cons left right))
(define (make-branch length structure)
  (cons length structure))
How much do you need to change your programs to convert to the new representation?

>> this is essentially a question on difference between list and cons 
>> and how the selector need to change, abstraction is here to save the day

(define (right-branch mobile)
  (cdr mobile)
)

(define (branch-structure branch)
  (cdr branch)
)
