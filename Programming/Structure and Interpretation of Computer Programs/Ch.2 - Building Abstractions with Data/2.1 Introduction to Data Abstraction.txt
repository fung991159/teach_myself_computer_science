Comment:
    1. Data abstraction: a methodology that enables us to isolate how
    a compound data object is used from the details of how it is constructed from more primitive data objects.

    2. closure - a attributes of compounded data that any elements be composed of itself.
    i.e. one of the elements of a pair can in turn be another pair.

Exercise 2.1. Define a better version of make-rat that handles both positive and negative arguments.
Make-rat should normalize the sign so that if the rational number is positive, both the numerator and
denominator are positive, and if the rational number is negative, only the numerator is negative.

>> this is easy to implement in python, but I am struggling with Scheme Syntax..
! it is clever to use keep the sign in a variable, i need to further study math

(define (make-rat n d)
  (let ((g (gcd n d))
        (denom-sign (if (> d 0) 1 (- 1))))
    (cons (* (/ n g) denom-sign)
          (* (/ d g) denom-sign))))


Exercise 2.2. Consider the problem of representing line segments in a plane. Each segment is represented
as a pair of points: a starting point and an ending point. Define a constructor make-segment and
selectors start-segment and end-segment that define the representation of segments in terms of
points. Furthermore, a point can be represented as a pair of numbers: the x coordinate and the y coordinate.
Accordingly, specify a constructor make-point and selectors x-point and y-point that define this
representation. Finally, using your selectors and constructors, define a procedure midpoint-segment
that takes a line segment as argument and returns its midpoint (the point whose coordinates are the average
of the coordinates of the endpoints). To try your procedures, you'll need a way to print points:
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

>>> should be as below, take a bit of effort to check the syntax instead of the logic
>>> however, i never need to use print-point somehow

(define (make-point x y)
  (cons x y)
)
(define (x-point point) (car point))
(define (y-point point) (cdr point))

(define (make-segment start-point end-point)
  (cons start-point end-point)
)
(define (start-segment segment) (car segment))
(define (end-segment segment) (cdr segment))


(define (midpoint-segment line-segment)
  (let ((avg (lambda (x y) (/ (+ x y) 2))))
    (cons
      (avg (x-point (start-segment line-segment)) (x-point (end-segment line-segment)))
      (avg (y-point (start-segment line-segment)) (y-point (end-segment line-segment)))
    )
  )
)

(midpoint-segment 
  (make-segment 
    (make-point 2 6)
    (make-point 8 19)
  )
)

Exercise 2.3. Implement a representation for rectangles in a plane. (Hint: You may want to make use of
exercise 2.2.) In terms of your constructors and selectors, create procedures that compute the perimeter and
the area of a given rectangle. Now implement a different representation for rectangles. Can you design
your system with suitable abstraction barriers, so that the same perimeter and area procedures will work
using either representation?

>>> #1st implementation, rectangle is composed by two segements,
>>> which inturn made up of 3 points, since the fourth points is irrelvant
! omg, my solution is so naive compare to codology, he even factored in angle!

(define (get_segment_length line-segment)
  ; get distance between two recentagle point,
  ; get only non-zero pane
  (let (
    (x_length (abs (- (x-point (start-segment line-segment)) (x-point (end-segment line-segment)))))
    (y_length (abs (- (y-point (start-segment line-segment)) (y-point (end-segment line-segment)))))
    )
    (if (= x_length 0)
      y_length
      x_length
    )
  )
)

(define (make_rect length-segment width-segment)
  (cons length-segment width-segment)
)
(define (get_rect_length rect)
  (get_segment_length (car rect))
)
(define (get_rect_width rect)
  (get_segment_length (cdr rect))
)
(define (compute_rect rect)
  (let (
       (rect_length (get_rect_length rect))
       (rect_width (get_rect_width rect))
    )
    (display 'recentagle_area:)
    (display (* rect_length rect_width))
    (newline)
    ; (display ' )
    (display 'recentagle_perimeter:)
    (display (* 2 (+ rect_length rect_width)))
  )
)

(compute_rect 
  (make_rect
    (make-segment (make-point 1 2) (make-point 10 2))
      (make-segment (make-point 1 2) (make-point 1 6)
  )
)


Exercise 2.4. Here is an alternative procedural representation of pairs. For this representation, verify that
(car (cons x y)) yields x for any objects x and y.
(define (cons x y)
  (lambda (m) (m x y)))
(define (car z)
  (z (lambda (p q) p)))
What is the corresponding definition of cdr? (Hint: To verify that this works, make use of the substitution
model of section 1.1.5.)

>> This obviously isn't a useful procedure but very good in understanding how 
>> procedure get pass around, it is brilliant.

(define (cons x y)
  (lambda (m) (m x y))) ; return a procedure take m func as arg, and execute it value x, y
(define (car z)
  (z (lambda (p q) p)))
(define (cdr z)
  (z (lambda (p q) q))) ; return second arg and excute it with z parameter

(cdr (cons 1 2))
(cdr (lambda (m) (m 1 2)))
(lambda (m) (m 1 2)) (lambda (p q) p)
hence (lambda (p q) p) will take 1, 2 as arguement


Exercise 2.5. Show that we can represent pairs of nonnegative integers using only numbers and arithmetic
operations if we represent the pair a and b as the integer that is the product 2a 3b. Give the corresponding
definitions of the procedures cons, car, and cdr.

>> not quite sure what the question is asking for..
(define (cons a b)
  (lambda (m) (m (expt 2 a) (expt 3 b))) 
(define (car z)
  (z (lambda (p q) p)))
(define (cdr z)
  (z (lambda (p q) q))) 


Exercise 2.6. In case representing pairs as procedures wasn't mind-boggling enough, consider that, in a
language that can manipulate procedures, we can get by without numbers (at least insofar as nonnegative
integers are concerned) by implementing 0 and the operation of adding 1 as
(define zero (lambda (f) (lambda (x) x)))
  (define (add-1 n)
    (lambda (f) (lambda (x) (f ((n f) x)))))
This representation is known as Church numerals, after its inventor, Alonzo Church, the logician who
invented the calculus.
Define one and two directly (not in terms of zero and add-1). (Hint: Use substitution to evaluate
(add-1 zero)). Give a direct definition of the addition procedure + (not in terms of repeated
application of add-1).


>>> did some note to clairfy on the function, though
>>> couldn't go further

(define zero (lambda (f) (lambda (x) x))) 
; zero will return a procedure that take argument f,
; and itself a lambda that take argument x, and return arg x itself

(define (add-1 n)
(lambda (f) (lambda (x) (f ((n f) x)))))
; add-1 take argument n will return a procedure that take argument f,
; and itself a lambda that take argument x, 
; which first excute arg n as function with value f
; the resulting function execute with value x
; finally execute function f with previous result

(define (add-1 zero)
(lambda (f) (lambda (x) (f ((zero f) x)))))
(lambda (f) (lambda (x) (f ((lambda (x) x) x))))
(lambda (f) (lambda (x) (f x))) 

!!! 
(define one (lambda (f) (lambda (x) (f x)))) 
(define two (lambda (f) (lambda (x) (f (f x)))))


Exercise 2.7. Alyssa's program is incomplete because she has not specified the implementation of the
interval abstraction. Here is a definition of the interval constructor:
(define (make-interval a b) (cons a b))
Define selectors upper-bound and lower-bound to complete the implementation.

>> piece of cake
(define (upper-bound x) (car x))
(define (lower-bound x) (cdr x))


Exercise 2.8. Using reasoning analogous to Alyssa's, describe how the difference of two intervals may be
computed. Define a corresponding subtraction procedure, called sub-interval.

>> very similar to add-interval, except need to cater negative val,
>> since it is subtraction

(define (sub-interval x y)
  (make-interval (abs (- (lower-bound x) (lower-bound y)))
  (abs (- (upper-bound x) (upper-bound y)))))
)

Exercise 2.9. The width of an interval is half of the difference between its upper and lower bounds. The
width is a measure of the uncertainty of the number specified by the interval. For some arithmetic
operations the width of the result of combining two intervals is a function only of the widths of the
argument intervals, whereas for others the width of the combination is not a function of the widths of the
argument intervals. Show that the width of the sum (or difference) of two intervals is a function only of the
widths of the intervals being added (or subtracted). Give examples to show that this is not true for
multiplication or division.

>> this is more like a math proving question than CS one... pass!


Exercise 2.10. Ben Bitdiddle, an expert systems programmer, looks over Alyssa's shoulder and comments
that it is not clear what it means to divide by an interval that spans zero. Modify Alyssa's code to check for
this condition and to signal an error if it occurs.

>> since the error would only occur when either bound of y is 0 , so just catch and raise
>> an error if it is such case

(define (div-interval2 x y)
  (cond (= 0 (upper-bound y)
          (error))
        (= 0 (lower-bound y)
          (error))
        (else
           (mul-interval x
    (make-interval (/ 1.0 (upper-bound y))
    (/ 1.0 (lower-bound y)))))
        ))

!!! it should be checking over a range, other than the point 0.
!!! not sure why x interval need to be checked though

(define (div-interval2 x y)
  (if (or (and (< 0 (lower-bound x)) (> 0 (upper-bound x)))
          (and (> 0 (lower-bound x)) (< 0 (upper-bound x)))
          (and (< 0 (lower-bound y)) (> 0 (upper-bound y)))
          (and (> 0 (lower-bound y)) (< 0 (upper-bound y))))
      (error "One or more interval crossing zero.")
      (mul-interval x
                    (make-interval
                     (/ 1.0 (upper-bound y))
                     (/ 1.0 (lower-bound y))))))


Exercise 2.11. In passing, Ben also cryptically comments: ``By testing the signs of the endpoints of the
intervals, it is possible to break mul-interval into nine cases, only one of which requires more than
two multiplications.'' Rewrite this procedure using Ben's suggestion.

>>> if both all lower and upper bound is positive, multiply only max-max, min-min

assume y is positive
>>> if only x lower bound is negative, ((lx * uy) (ux * uy))
>>> if only x upper bound is negative, ((ux * uy) (lx * uy))
>>> if both interval is negative in x, ((lx * uy) (ux * ly))

if ly is negative
>>> if x lower bound is negative, ((lx * uy) (ux * uy))
>>> if x upper bound is negative, (((max ux*ly ux*uy) (ux * ly))
>>> if both interval is negative in x, ((ux * uy) (ux * ly))

! after peeking at the anser this question is exceptionaly tedious


After debugging her program, Alyssa shows it to a potential user, who complains that her program solves
the wrong problem. He wants a program that can deal with numbers represented as a center value and an
additive tolerance; for example, he wants to work with intervals such as 3.5± 0.15 rather than [3.35, 3.65].
Alyssa returns to her desk and fixes this problem by supplying an alternate constructor and alternate
selectors:
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
Unfortunately, most of Alyssa's users are engineers. Real engineering situations usually involve
measurements with only a small uncertainty, measured as the ratio of the width of the interval to the
midpoint of the interval. Engineers usually specify percentage tolerances on the parameters of devices, as
in the resistor specifications given earlier.

Exercise 2.12. Define a constructor make-center-percent that takes a center and a percentage
tolerance and produces the desired interval. You must also define a selector percent that produces the
percentage tolerance for a given interval. The center selector is the same as the one shown above.

>>> this is quite straight forward, my attempt:
>>>
(define (make_center_percent c percent_tolerance)
  (let ((w (* c percent_tolerance)))
    (make-center-width c w)
  )
)
(display (make_center_percent 10 0.02)) 
; (9.8, 10.02)

(define (percent i)
  (let ((c (center i)))
    (/ (- (upper-bound i) c) c)
  )
)

(display (percent (make_center_percent 10 0.02)))  
; 0.019999999999999928 

Exercise 2.13. Show that under the assumption of small percentage tolerances there is a simple formula
for the approximate percentage tolerance of the product of two intervals in terms of the tolerances of the
factors. You may simplify the problem by assuming that all numbers are positive.

! another math problem, skip this!


He has written the following two programs, each of which computes the parallel-resistors formula
differently:
(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make-interval 1 1)))
    (div-interval one
      (add-interval (div-interval one r1)
                    (div-interval one r2)))))
                    
Lem complains that Alyssa's program gives different answers for the two ways of computing. This is a
serious complaint.
Exercise 2.14. Demonstrate that Lem is right. Investigate the behavior of the system on a variety of
arithmetic expressions. Make some intervals A and B, and use them in computing the expressions A/A and
A/B. You will get the most insight by using intervals whose width is a small percentage of the center value.
Examine the results of the computation in center-percent form